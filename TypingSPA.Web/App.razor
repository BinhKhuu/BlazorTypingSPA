<MudThemeProvider @ref="@MudThemeProviderRef" IsDarkMode="Settings.IsDarkMode" Theme="Theme" DefaultScrollbar="Settings.DefaultScrollBar" />
<MudDialogProvider />
<MudSnackbarProvider />
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code{
    [Inject]
    ThemeService ThemeService { get; set; }
    MudThemeProvider MudThemeProviderRef { get; set; }
    ThemeSettings Settings { get; set; }
    MudTheme Theme { get; set; } = new MudTheme();

    protected override async Task OnInitializedAsync()
    {
        // prevent MudThemeProvider from erroring since Settings is used as bind property
        Settings = new ThemeSettings();
        await ThemeService.LoadSettingsFromLocalStorage();
        Settings = ThemeService.SettingsObservable.Settings;
        SetColourTheme();
        Action<ThemeSettings> OnThemeSettingsUpdate = (settings) =>
        {
            Settings = settings;
            SetColourTheme();
            ThemeService.SaveLocalStorageThemeSettings();
            this.StateHasChanged();
        };

        ThemeService.AddThemeSubscription(OnThemeSettingsUpdate);
    }


    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        // load preferences not needed when OnIntializedAsync also loads theme settings
    //        await ThemeService.LoadSettingsFromLocalStorage();
    //        Settings = ThemeService.SettingsObservable.Settings;
    //    }
    //}

    public void SetColourTheme()
    {
        Theme = new MudTheme()
            {
                Palette = new PaletteLight()
                {
                    Primary = Settings.LightTheme.Primary,
                    Secondary = Settings.LightTheme.Secondary,
                    AppbarBackground = Settings.LightTheme.AppbarBackground,
                },
                PaletteDark = new PaletteDark()
                {
                    Primary = Settings.DarkTheme.Primary,
                    Secondary = Settings.DarkTheme.Secondary,
                    AppbarBackground = Settings.DarkTheme.AppbarBackground
                }
            };
    }
}